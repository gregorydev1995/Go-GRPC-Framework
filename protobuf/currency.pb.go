// Code generated by protoc-gen-go. DO NOT EDIT.
// source: currency.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Currency represents currency information
type Currency struct {
	Code    string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Number  int32  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	Country string `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Currency) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Currency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Currency) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Currency) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// CurrencyList used for list of currencies
type CurrencyList struct {
	Items []*Currency `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *CurrencyList) Reset()                    { *m = CurrencyList{} }
func (m *CurrencyList) String() string            { return proto.CompactTextString(m) }
func (*CurrencyList) ProtoMessage()               {}
func (*CurrencyList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CurrencyList) GetItems() []*Currency {
	if m != nil {
		return m.Items
	}
	return nil
}

// CurrencyRequest used to request currency
type CurrencyRequest struct {
	Code   string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Number int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *CurrencyRequest) Reset()                    { *m = CurrencyRequest{} }
func (m *CurrencyRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrencyRequest) ProtoMessage()               {}
func (*CurrencyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CurrencyRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CurrencyRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*Currency)(nil), "protobuf.Currency")
	proto.RegisterType((*CurrencyList)(nil), "protobuf.CurrencyList")
	proto.RegisterType((*CurrencyRequest)(nil), "protobuf.CurrencyRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CurrencyService service

type CurrencyServiceClient interface {
	// GetCurrencyList  returns matching Currency values as list
	// Example of a unary call
	GetCurrencyList(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyList, error)
	// GetCurrencyStream returns matching Currencies as a server stream
	// Example of using server to client stream.
	GetCurrencyStream(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (CurrencyService_GetCurrencyStreamClient, error)
	// SaveCurrencyStream sends multiple currencies to server to be saved
	// returns a list of saved currency.
	// Example of using client stream to server.
	SaveCurrencyStream(ctx context.Context, opts ...grpc.CallOption) (CurrencyService_SaveCurrencyStreamClient, error)
	// FindCurrencyStream sends a stream of CurrencyRequest to server and returns
	// a stream of Currency values.
	// Example of bi-directional stream
	FindCurrencyStream(ctx context.Context, opts ...grpc.CallOption) (CurrencyService_FindCurrencyStreamClient, error)
}

type currencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyServiceClient(cc *grpc.ClientConn) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) GetCurrencyList(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyList, error) {
	out := new(CurrencyList)
	err := grpc.Invoke(ctx, "/protobuf.CurrencyService/GetCurrencyList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetCurrencyStream(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (CurrencyService_GetCurrencyStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CurrencyService_serviceDesc.Streams[0], c.cc, "/protobuf.CurrencyService/GetCurrencyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyServiceGetCurrencyStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurrencyService_GetCurrencyStreamClient interface {
	Recv() (*Currency, error)
	grpc.ClientStream
}

type currencyServiceGetCurrencyStreamClient struct {
	grpc.ClientStream
}

func (x *currencyServiceGetCurrencyStreamClient) Recv() (*Currency, error) {
	m := new(Currency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyServiceClient) SaveCurrencyStream(ctx context.Context, opts ...grpc.CallOption) (CurrencyService_SaveCurrencyStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CurrencyService_serviceDesc.Streams[1], c.cc, "/protobuf.CurrencyService/SaveCurrencyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyServiceSaveCurrencyStreamClient{stream}
	return x, nil
}

type CurrencyService_SaveCurrencyStreamClient interface {
	Send(*Currency) error
	CloseAndRecv() (*CurrencyList, error)
	grpc.ClientStream
}

type currencyServiceSaveCurrencyStreamClient struct {
	grpc.ClientStream
}

func (x *currencyServiceSaveCurrencyStreamClient) Send(m *Currency) error {
	return x.ClientStream.SendMsg(m)
}

func (x *currencyServiceSaveCurrencyStreamClient) CloseAndRecv() (*CurrencyList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CurrencyList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyServiceClient) FindCurrencyStream(ctx context.Context, opts ...grpc.CallOption) (CurrencyService_FindCurrencyStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CurrencyService_serviceDesc.Streams[2], c.cc, "/protobuf.CurrencyService/FindCurrencyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyServiceFindCurrencyStreamClient{stream}
	return x, nil
}

type CurrencyService_FindCurrencyStreamClient interface {
	Send(*CurrencyRequest) error
	Recv() (*Currency, error)
	grpc.ClientStream
}

type currencyServiceFindCurrencyStreamClient struct {
	grpc.ClientStream
}

func (x *currencyServiceFindCurrencyStreamClient) Send(m *CurrencyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *currencyServiceFindCurrencyStreamClient) Recv() (*Currency, error) {
	m := new(Currency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CurrencyService service

type CurrencyServiceServer interface {
	// GetCurrencyList  returns matching Currency values as list
	// Example of a unary call
	GetCurrencyList(context.Context, *CurrencyRequest) (*CurrencyList, error)
	// GetCurrencyStream returns matching Currencies as a server stream
	// Example of using server to client stream.
	GetCurrencyStream(*CurrencyRequest, CurrencyService_GetCurrencyStreamServer) error
	// SaveCurrencyStream sends multiple currencies to server to be saved
	// returns a list of saved currency.
	// Example of using client stream to server.
	SaveCurrencyStream(CurrencyService_SaveCurrencyStreamServer) error
	// FindCurrencyStream sends a stream of CurrencyRequest to server and returns
	// a stream of Currency values.
	// Example of bi-directional stream
	FindCurrencyStream(CurrencyService_FindCurrencyStreamServer) error
}

func RegisterCurrencyServiceServer(s *grpc.Server, srv CurrencyServiceServer) {
	s.RegisterService(&_CurrencyService_serviceDesc, srv)
}

func _CurrencyService_GetCurrencyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetCurrencyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CurrencyService/GetCurrencyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetCurrencyList(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetCurrencyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServiceServer).GetCurrencyStream(m, &currencyServiceGetCurrencyStreamServer{stream})
}

type CurrencyService_GetCurrencyStreamServer interface {
	Send(*Currency) error
	grpc.ServerStream
}

type currencyServiceGetCurrencyStreamServer struct {
	grpc.ServerStream
}

func (x *currencyServiceGetCurrencyStreamServer) Send(m *Currency) error {
	return x.ServerStream.SendMsg(m)
}

func _CurrencyService_SaveCurrencyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CurrencyServiceServer).SaveCurrencyStream(&currencyServiceSaveCurrencyStreamServer{stream})
}

type CurrencyService_SaveCurrencyStreamServer interface {
	SendAndClose(*CurrencyList) error
	Recv() (*Currency, error)
	grpc.ServerStream
}

type currencyServiceSaveCurrencyStreamServer struct {
	grpc.ServerStream
}

func (x *currencyServiceSaveCurrencyStreamServer) SendAndClose(m *CurrencyList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *currencyServiceSaveCurrencyStreamServer) Recv() (*Currency, error) {
	m := new(Currency)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CurrencyService_FindCurrencyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CurrencyServiceServer).FindCurrencyStream(&currencyServiceFindCurrencyStreamServer{stream})
}

type CurrencyService_FindCurrencyStreamServer interface {
	Send(*Currency) error
	Recv() (*CurrencyRequest, error)
	grpc.ServerStream
}

type currencyServiceFindCurrencyStreamServer struct {
	grpc.ServerStream
}

func (x *currencyServiceFindCurrencyStreamServer) Send(m *Currency) error {
	return x.ServerStream.SendMsg(m)
}

func (x *currencyServiceFindCurrencyStreamServer) Recv() (*CurrencyRequest, error) {
	m := new(CurrencyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CurrencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrencyList",
			Handler:    _CurrencyService_GetCurrencyList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCurrencyStream",
			Handler:       _CurrencyService_GetCurrencyStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveCurrencyStream",
			Handler:       _CurrencyService_SaveCurrencyStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindCurrencyStream",
			Handler:       _CurrencyService_FindCurrencyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "currency.proto",
}

func init() { proto.RegisterFile("currency.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x8f, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xeb, 0xf4, 0x0f, 0xe5, 0x40, 0x54, 0xdc, 0x50, 0x19, 0xa6, 0xc8, 0x93, 0xa7, 0xa8,
	0x2a, 0x0b, 0x0b, 0x13, 0x28, 0x08, 0x89, 0x29, 0x79, 0x82, 0xc4, 0x39, 0xa4, 0x0c, 0x71, 0xc0,
	0xb1, 0x2b, 0xf5, 0xb5, 0x78, 0x42, 0x94, 0xa4, 0xa1, 0x01, 0x0c, 0x0b, 0x93, 0xef, 0xee, 0xfb,
	0xee, 0xbb, 0x9f, 0xe1, 0x42, 0x39, 0x63, 0x48, 0xab, 0x7d, 0xf4, 0x6a, 0x6a, 0x5b, 0xe3, 0xb2,
	0x7b, 0x72, 0xf7, 0x22, 0x0a, 0x58, 0xde, 0x1f, 0x34, 0x44, 0x98, 0xa9, 0xba, 0x20, 0xce, 0x42,
	0x26, 0x4f, 0x93, 0xae, 0x6e, 0x67, 0x3a, 0xab, 0x88, 0x07, 0xfd, 0xac, 0xad, 0x71, 0x0d, 0x0b,
	0xed, 0xaa, 0x9c, 0x0c, 0x9f, 0x86, 0x4c, 0xce, 0x93, 0x43, 0x87, 0x1c, 0x4e, 0x54, 0xed, 0xb4,
	0x35, 0x7b, 0x3e, 0xeb, 0xec, 0x43, 0x2b, 0x6e, 0xe1, 0x7c, 0xb8, 0xf2, 0x5c, 0x36, 0x16, 0x25,
	0xcc, 0x4b, 0x4b, 0x55, 0xc3, 0x59, 0x38, 0x95, 0x67, 0x5b, 0x8c, 0x06, 0x9e, 0x68, 0xb0, 0x25,
	0xbd, 0x41, 0xdc, 0xc1, 0xea, 0x73, 0x44, 0x6f, 0x8e, 0x1a, 0xeb, 0xc5, 0x3c, 0x22, 0x05, 0x63,
	0xa4, 0xed, 0x7b, 0x70, 0xdc, 0x4f, 0xc9, 0xec, 0x4a, 0x45, 0x18, 0xc3, 0xea, 0x91, 0xec, 0x17,
	0x9e, 0x2b, 0x0f, 0x40, 0x7f, 0xed, 0x7a, 0xfd, 0x53, 0x6a, 0x57, 0xc4, 0x04, 0x63, 0xb8, 0x1c,
	0xe5, 0xa4, 0xd6, 0x50, 0x56, 0xfd, 0x95, 0xe4, 0xf9, 0xa5, 0x98, 0x6c, 0x18, 0x3e, 0x00, 0xa6,
	0xd9, 0x8e, 0xbe, 0x05, 0x79, 0xdc, 0xbf, 0xb3, 0x48, 0x86, 0x4f, 0x80, 0x71, 0xa9, 0x8b, 0x7f,
	0xe2, 0x48, 0xb6, 0x61, 0xf9, 0xa2, 0x13, 0x6e, 0x3e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x06, 0x92,
	0x71, 0xef, 0x36, 0x02, 0x00, 0x00,
}
