// Code generated by protoc-gen-go. DO NOT EDIT.
// source: currency.proto

/*
Package curproto is a generated protocol buffer package.

It is generated from these files:
	currency.proto

It has these top-level messages:
	Currency
	CurrencyList
	CurrencyRequest
*/
package curproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Currency represents currency information
type Currency struct {
	Code    string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Number  int32  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	Country string `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Currency) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Currency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Currency) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Currency) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// CurrencyList used for list of currencies
type CurrencyList struct {
	Items []*Currency `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *CurrencyList) Reset()                    { *m = CurrencyList{} }
func (m *CurrencyList) String() string            { return proto.CompactTextString(m) }
func (*CurrencyList) ProtoMessage()               {}
func (*CurrencyList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CurrencyList) GetItems() []*Currency {
	if m != nil {
		return m.Items
	}
	return nil
}

// CurrencyRequest used to request currency
type CurrencyRequest struct {
	Code   string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Number int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *CurrencyRequest) Reset()                    { *m = CurrencyRequest{} }
func (m *CurrencyRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrencyRequest) ProtoMessage()               {}
func (*CurrencyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CurrencyRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CurrencyRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*Currency)(nil), "curproto.Currency")
	proto.RegisterType((*CurrencyList)(nil), "curproto.CurrencyList")
	proto.RegisterType((*CurrencyRequest)(nil), "curproto.CurrencyRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CurrencyService service

type CurrencyServiceClient interface {
	GetCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*Currency, error)
}

type currencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyServiceClient(cc *grpc.ClientConn) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) GetCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := grpc.Invoke(ctx, "/curproto.CurrencyService/GetCurrency", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrencyService service

type CurrencyServiceServer interface {
	GetCurrency(context.Context, *CurrencyRequest) (*Currency, error)
}

func RegisterCurrencyServiceServer(s *grpc.Server, srv CurrencyServiceServer) {
	s.RegisterService(&_CurrencyService_serviceDesc, srv)
}

func _CurrencyService_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/curproto.CurrencyService/GetCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetCurrency(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "curproto.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrency",
			Handler:    _CurrencyService_GetCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency.proto",
}

func init() { proto.RegisterFile("currency.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0x31, 0x4f, 0x87, 0x30,
	0x14, 0xc4, 0xed, 0xff, 0x0f, 0x88, 0x0f, 0xa3, 0xc9, 0x1b, 0x4c, 0x75, 0x22, 0x9d, 0x3a, 0x31,
	0xe0, 0xe2, 0xa2, 0x8b, 0x83, 0x8b, 0x8b, 0xf8, 0x09, 0xa4, 0xbc, 0x81, 0x81, 0x56, 0x4b, 0x6b,
	0xc2, 0xb7, 0x37, 0x14, 0x0a, 0x0e, 0x6c, 0x77, 0xd7, 0x6b, 0xee, 0xf7, 0xe0, 0x46, 0x79, 0x6b,
	0x49, 0xab, 0xa9, 0xfa, 0xb6, 0xc6, 0x19, 0xcc, 0x95, 0xb7, 0x41, 0x89, 0x0e, 0xf2, 0xd7, 0xf5,
	0x0d, 0x11, 0x12, 0x65, 0x3a, 0xe2, 0xac, 0x64, 0xf2, 0xaa, 0x09, 0x7a, 0xce, 0xf4, 0xd7, 0x40,
	0xfc, 0xb4, 0x64, 0xb3, 0xc6, 0x3b, 0xc8, 0xb4, 0x1f, 0x5a, 0xb2, 0xfc, 0x5c, 0x32, 0x99, 0x36,
	0xab, 0x43, 0x0e, 0x97, 0xca, 0x78, 0xed, 0xec, 0xc4, 0x93, 0x50, 0x8f, 0x56, 0x3c, 0xc1, 0x75,
	0x5c, 0x79, 0xef, 0x47, 0x87, 0x12, 0xd2, 0xde, 0xd1, 0x30, 0x72, 0x56, 0x9e, 0x65, 0x51, 0x63,
	0x15, 0x79, 0xaa, 0x58, 0x6b, 0x96, 0x82, 0x78, 0x86, 0xdb, 0x2d, 0xa2, 0x1f, 0x4f, 0xa3, 0x3b,
	0xc4, 0xdc, 0x91, 0x4e, 0xff, 0x91, 0xea, 0x8f, 0xfd, 0xfb, 0x27, 0xd9, 0xdf, 0x5e, 0x11, 0xbe,
	0x40, 0xf1, 0x46, 0x6e, 0x3b, 0xfa, 0xfe, 0x60, 0x7b, 0x19, 0x7a, 0x38, 0xc0, 0x12, 0x17, 0x6d,
	0x16, 0x92, 0xc7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x19, 0x57, 0x37, 0x54, 0x01, 0x00,
	0x00,
}
